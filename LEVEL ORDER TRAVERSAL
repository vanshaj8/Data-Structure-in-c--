#include<iostream>
#include<queue>
#include<algorithm> 
using namespace std;

struct bstnode
{
	int data;
	bstnode* left;
	bstnode* right;
};

bstnode* getnewnode(int value)
{
	bstnode* newnode= new bstnode();
	newnode->data=value;
	newnode->left=NULL;
	newnode->right=NULL;
	
	return newnode;
}

bstnode* insert(bstnode* root, int value)
{
	if(root==NULL)
	{
		root=getnewnode(value);
	}
	else if(value<=root->data)
	{
		root->left=insert(root->left,value);
	}
	else
	{
		root->right=insert(root->right,value);
	}
	
	return root;
}

bool search(bstnode* root, int value)
{
	if(root==NULL)
	{
		return false;
	}
	else if(root->data==value)
	{
		return true;
	}
	else if(value<=root->data)
	{
		return search(root->left,value);
	}
	else
	{
		return search(root->right,value);
	}
}

 void levelorder(bstnode* root)
 {
 	if(root==NULL)
 	{
 		return;
	}
	else
	{
		queue< bstnode* > Q;
		Q.push(root);
		while(!Q.empty())
		{
			bstnode* current=Q.front();
			Q.pop(); 
			cout<<current->data<<" ";
			if(current->left!=NULL) Q.push(current->left);
			if(current->right!=NULL)Q.push(current->right);
		}
		
	}
 }


int main()
{
	bstnode* root=NULL;
	root = insert(root,15);	
	root = insert(root,10);	
	root = insert(root,20);
	root = insert(root,25);
	root = insert(root,8);
	root = insert(root,12);
	
	int n;
	cin>>n;
	
	if(search(root,n)==true)
	{
		cout<<"found";
	}
	else
	{
		cout<<"not found";
	}
	
	levelorder(root);

	
	
	return 0;
}
