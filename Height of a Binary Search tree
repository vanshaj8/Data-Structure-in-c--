#include<iostream>
#include<algorithm> 
using namespace std;

struct bstnode
{
	int data;
	bstnode* left;
	bstnode* right;	
};
 // Creating a new node in memory
bstnode* getnewnode(int data)
{
	bstnode* newnode= new bstnode();
	newnode->data=data;
	newnode->left=newnode->right=NULL;
	
	return newnode;
}

bstnode* insert(bstnode* root,int data)
{
	if(root==NULL)
	{
	  root=getnewnode(data);	
	}
	else if(data<=root->data)
	{
		root->left=insert(root->left,data);
	}
	else
	{
		root->right=insert(root->right,data);
	}
	
	return root;	
}

bool search(bstnode* root, int data)
{
	if(root==NULL)
	{
		return false;
	}
	else if(root->data == data) {
		return true;
	}
	else if(data<=root->data)
	{
		return search(root->left,data);
	}
	else
	{
		return search(root->right,data);
	}
}

int findmin(bstnode* root)
{
	if(root==NULL)
	{
		cout<<"ERROR TREE IS EMPTY";
		return -1;
	}
	while(root->left!=NULL)
	{
		root=root->left;
	}
	
	return root->data;
}

int findmax(bstnode* root)
{
	if(root==NULL)
	{
		cout<<" tree is empty";
		
		return -1;
	}
	while(root->right!=NULL)
	{
		root=root->right;
	}
	
	return root->data;
}
// uisng recursion
/*
int findmin(bstnode* root)
{
	if(root==NULL)
	{
		cout<<"ERROR TREE IS EMPTY";
		return -1;
	}
	else if(root->left==NULL)
	{
	return root->data;
}
	
	return findmin(root->left);
}
*/

int maxDepth(bstnode* root)  
{  
    if (root == NULL)  
        return 0;  
    else
    {  
        /* compute the depth of each subtree */
        int lDepth = maxDepth(root->left);  
        int rDepth = maxDepth(root->right);  
      
        /* use the larger one */
        if (lDepth > rDepth)  
            return(lDepth + 1);  
        else return(rDepth + 1);  
    }  
} 
int main()
{
	bstnode* root=NULL;
	root = insert(root,15);	
	root = insert(root,10);	
	root = insert(root,20);
	root = insert(root,25);
	root = insert(root,8);
	root = insert(root,12);
	
	int n;
	cin>>n;
	
	if(search(root,n)==true)
	{
		cout<<"found";
	}
	else
	{
		cout<<"not found";
	}
	cout<<"the minimum value is"<<findmin(root);
	cout<<"the max value is"<<findmax(root);
	cout<<"the height of the tree is "<<maxDepth(root);
	
	return 0;
}
