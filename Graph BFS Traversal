#include<iostream>
#include<vector>
#include<queue>
using namespace std;
void add_edge(vector<int> graph[],int v,int e)
{
	graph[v].push_back(e);
	graph[e].push_back(v);
}

void printgraph(vector<int>graph[],int size)
{
    for(int i=0;i<size;i++)
	{
		cout<<" Adjeacent of "<<i<<"is"<<"\n";
		
		for(auto x : graph[i])
		{
			cout<<" -> "<< x;
		}		
		
		cout<<" \n";
	}	
}

void bfs_traversal(vector<int>graph[],int x,bool vis[],int vertex)
{
	queue<int> q;
	q.push(x);
	vis[x]=true;
	
	while(!q.empty())
	{
		int current_vertex=q.front();
		cout<<current_vertex<<" ";
		q.pop();
		for(auto it : graph[current_vertex])
		{
			if(!vis[it])
			{
				vis[it]=true;
				q.push(it);
			}
		}
	}
}
int main()
{
	int vertex=5;
	vector<int>graph[vertex];
	add_edge(graph, 0, 1); 
    add_edge(graph, 0, 4); 
    add_edge(graph, 1, 2); 
    add_edge(graph, 1, 3); 
    add_edge(graph, 1, 4); 
    add_edge(graph, 2, 3); 
    add_edge(graph, 3, 4); 
    bool vis[]={false};
   //  printgraph(graph,vertex); 	
	bfs_traversal(graph,0,vis,vertex);
	return 0;
}
